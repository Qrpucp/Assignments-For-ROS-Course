// Generated by gencpp from file motion_planning/camera_msg.msg
// DO NOT EDIT!


#ifndef MOTION_PLANNING_MESSAGE_CAMERA_MSG_H
#define MOTION_PLANNING_MESSAGE_CAMERA_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_planning
{
template <class ContainerAllocator>
struct camera_msg_
{
  typedef camera_msg_<ContainerAllocator> Type;

  camera_msg_()
    : find_box_flag(false)
    , x_center_dis(0.0)
    , y_center_dis(0.0)
    , box_hight(0.0)  {
    }
  camera_msg_(const ContainerAllocator& _alloc)
    : find_box_flag(false)
    , x_center_dis(0.0)
    , y_center_dis(0.0)
    , box_hight(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _find_box_flag_type;
  _find_box_flag_type find_box_flag;

   typedef double _x_center_dis_type;
  _x_center_dis_type x_center_dis;

   typedef double _y_center_dis_type;
  _y_center_dis_type y_center_dis;

   typedef double _box_hight_type;
  _box_hight_type box_hight;





  typedef boost::shared_ptr< ::motion_planning::camera_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_planning::camera_msg_<ContainerAllocator> const> ConstPtr;

}; // struct camera_msg_

typedef ::motion_planning::camera_msg_<std::allocator<void> > camera_msg;

typedef boost::shared_ptr< ::motion_planning::camera_msg > camera_msgPtr;
typedef boost::shared_ptr< ::motion_planning::camera_msg const> camera_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_planning::camera_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_planning::camera_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motion_planning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'motion_planning': ['/home/qrpucp/px4_control/src/motion_planning/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motion_planning::camera_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_planning::camera_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_planning::camera_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_planning::camera_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_planning::camera_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_planning::camera_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_planning::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "114e47e9e532df1ce24754afff3794bc";
  }

  static const char* value(const ::motion_planning::camera_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x114e47e9e532df1cULL;
  static const uint64_t static_value2 = 0xe24754afff3794bcULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_planning::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_planning/camera_msg";
  }

  static const char* value(const ::motion_planning::camera_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_planning::camera_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool find_box_flag\n\
float64 x_center_dis\n\
float64 y_center_dis\n\
float64 box_hight\n\
";
  }

  static const char* value(const ::motion_planning::camera_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_planning::camera_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.find_box_flag);
      stream.next(m.x_center_dis);
      stream.next(m.y_center_dis);
      stream.next(m.box_hight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_planning::camera_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_planning::camera_msg_<ContainerAllocator>& v)
  {
    s << indent << "find_box_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.find_box_flag);
    s << indent << "x_center_dis: ";
    Printer<double>::stream(s, indent + "  ", v.x_center_dis);
    s << indent << "y_center_dis: ";
    Printer<double>::stream(s, indent + "  ", v.y_center_dis);
    s << indent << "box_hight: ";
    Printer<double>::stream(s, indent + "  ", v.box_hight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_PLANNING_MESSAGE_CAMERA_MSG_H
