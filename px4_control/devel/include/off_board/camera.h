// Generated by gencpp from file off_board/camera.msg
// DO NOT EDIT!


#ifndef OFF_BOARD_MESSAGE_CAMERA_H
#define OFF_BOARD_MESSAGE_CAMERA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace off_board
{
template <class ContainerAllocator>
struct camera_
{
  typedef camera_<ContainerAllocator> Type;

  camera_()
    : find_obs_flag(false)
    , dis(0.0)
    , pos_left(0.0)
    , pos_right(0.0)
    , x_pos(0.0)
    , y_pos(0.0)  {
    }
  camera_(const ContainerAllocator& _alloc)
    : find_obs_flag(false)
    , dis(0.0)
    , pos_left(0.0)
    , pos_right(0.0)
    , x_pos(0.0)
    , y_pos(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _find_obs_flag_type;
  _find_obs_flag_type find_obs_flag;

   typedef float _dis_type;
  _dis_type dis;

   typedef float _pos_left_type;
  _pos_left_type pos_left;

   typedef float _pos_right_type;
  _pos_right_type pos_right;

   typedef float _x_pos_type;
  _x_pos_type x_pos;

   typedef float _y_pos_type;
  _y_pos_type y_pos;





  typedef boost::shared_ptr< ::off_board::camera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::off_board::camera_<ContainerAllocator> const> ConstPtr;

}; // struct camera_

typedef ::off_board::camera_<std::allocator<void> > camera;

typedef boost::shared_ptr< ::off_board::camera > cameraPtr;
typedef boost::shared_ptr< ::off_board::camera const> cameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::off_board::camera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::off_board::camera_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace off_board

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'off_board': ['/home/qrpucp/px4_control/src/off_board/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::off_board::camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::off_board::camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::off_board::camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::off_board::camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::off_board::camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::off_board::camera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::off_board::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db349a97975dc8574cf482cb05513bb9";
  }

  static const char* value(const ::off_board::camera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb349a97975dc857ULL;
  static const uint64_t static_value2 = 0x4cf482cb05513bb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::off_board::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "off_board/camera";
  }

  static const char* value(const ::off_board::camera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::off_board::camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool find_obs_flag\n\
float32 dis\n\
float32 pos_left\n\
float32 pos_right\n\
float32 x_pos\n\
float32 y_pos\n\
";
  }

  static const char* value(const ::off_board::camera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::off_board::camera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.find_obs_flag);
      stream.next(m.dis);
      stream.next(m.pos_left);
      stream.next(m.pos_right);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::off_board::camera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::off_board::camera_<ContainerAllocator>& v)
  {
    s << indent << "find_obs_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.find_obs_flag);
    s << indent << "dis: ";
    Printer<float>::stream(s, indent + "  ", v.dis);
    s << indent << "pos_left: ";
    Printer<float>::stream(s, indent + "  ", v.pos_left);
    s << indent << "pos_right: ";
    Printer<float>::stream(s, indent + "  ", v.pos_right);
    s << indent << "x_pos: ";
    Printer<float>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<float>::stream(s, indent + "  ", v.y_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFF_BOARD_MESSAGE_CAMERA_H
